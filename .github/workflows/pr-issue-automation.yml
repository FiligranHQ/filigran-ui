name: PR and Issue Status Management
on:
  pull_request:
    types: [opened, edited, ready_for_review, converted_to_draft, closed]
    branches:
      - main
  pull_request_review:
    types: [submitted]
  pull_request_target:
    types: [labeled]
env:
  ORGANIZATION: 'FiligranHQ'
  PROJECT_NUMBER: 30
jobs:
  manage-pr-and-issues:
    runs-on: ubuntu-latest
    permissions:
      issues: write
      pull-requests: write
      contents: read
      repository-projects: write
    steps:
      - uses: actions/create-github-app-token@v2
        id: app-token
        with:
          app-id: ${{ vars.FILIGRANHQ_PROJECT_APP_ID }}
          private-key: ${{ secrets.FILIGRANHQ_PROJECT_APP_PRIVATE_KEY }}
          owner: ${{ github.repository_owner }}

      - name: Assign PR to creator
        if: github.event_name == 'pull_request' && github.event.action == 'opened'
        uses: actions/github-script@v7
        with:
          github-token: ${{ secrets.GITHUB_TOKEN }}
          script: |
            const prCreator = context.payload.pull_request.user.login;
            console.log(`Assigning PR to creator: ${prCreator}`);
            
            try {
              await github.rest.issues.addAssignees({
                owner: context.repo.owner,
                repo: context.repo.repo,
                issue_number: context.issue.number,
                assignees: [prCreator]
              });
              console.log(`âœ… Successfully assigned PR to ${prCreator}`);
            } catch (error) {
              console.error(`Failed to assign PR to ${prCreator}:`, error);
            }

      - name: Check if creator is in FiligranHQ organization
        if: github.event_name == 'pull_request' && github.event.action == 'opened'
        id: check_org_membership
        uses: actions/github-script@v7
        with:
          github-token: ${{ secrets.GITHUB_TOKEN }}
          script: |
            try {
              const { data: membership } = await github.rest.orgs.checkMembershipForUser({
                org: 'FiligranHQ',
                username: context.payload.pull_request.user.login
              });
              return true;
            } catch (error) {
              if (error.status === 404) {
                return false;
              }
              throw error;
            }

      - name: Add Filigran Team label
        if: steps.check_org_membership.outputs.result == 'true'
        uses: actions/github-script@v7
        with:
          github-token: ${{ secrets.GITHUB_TOKEN }}
          script: |
            await github.rest.issues.addLabels({
              owner: context.repo.owner,
              repo: context.repo.repo,
              issue_number: context.issue.number,
              labels: ['Filigran Team']
            });

      - name: Extract issue numbers from PR body and title
        id: extract_issues
        uses: actions/github-script@v7
        with:
          github-token: ${{ secrets.GITHUB_TOKEN }}
          script: |
            const issueNumbers = new Set();
            
            // Extract from PR body
            const body = context.payload.pull_request.body || '';
            // Match #123, fixes #123, closes #123, resolves #123, etc.
            const bodyMatches = body.matchAll(/(?:(?:fixes|closes|resolves|fix|close|resolve)\s+)?#(\d+)/gi);
            for (const match of bodyMatches) {
              issueNumbers.add(match[1]);
            }
            
            // Extract from PR title
            const title = context.payload.pull_request.title || '';
            const titleMatches = title.matchAll(/#(\d+)/g);
            for (const match of titleMatches) {
              issueNumbers.add(match[1]);
            }
            
            const uniqueIssues = Array.from(issueNumbers).filter(num => num);
            core.setOutput('issue_numbers', uniqueIssues.join(','));
            
            if (uniqueIssues.length > 0) {
              console.log('Found issue numbers:', uniqueIssues.join(', '));
            } else {
              console.log('No issue numbers found in PR body or title');
            }
            
            return uniqueIssues;

      - name: Update all issues status
        if: steps.extract_issues.outputs.issue_numbers != ''
        uses: actions/github-script@v7
        with:
          github-token: ${{ steps.app-token.outputs.token }}
          script: |
            const issueNumbers = "${{ steps.extract_issues.outputs.issue_numbers }}".split(',').filter(num => num);
            if (issueNumbers.length === 0) return;
            
            const pr = context.payload.pull_request;
            let newStatus = '';
            
            // Determine status based on event and conditions
            if (context.eventName === 'pull_request') {
              if (context.payload.action === 'closed' && pr.merged) {
                newStatus = 'Ready to be deployed';
              } else if (pr.draft) {
                newStatus = 'dev in progress';
              } else if (pr.state === 'open') {
                newStatus = 'In review';
              }
            } else if (context.eventName === 'pull_request_review' || context.eventName === 'pull_request_target') {
              // Get PR data and reviews
              const { data: prData } = await github.rest.pulls.get({
                owner: context.repo.owner,
                repo: context.repo.repo,
                pull_number: context.issue.number
              });
            
              const { data: reviews } = await github.rest.pulls.listReviews({
                owner: context.repo.owner,
                repo: context.repo.repo,
                pull_number: context.issue.number
              });
            
              const hasApproval = reviews.some(review => review.state === 'APPROVED');
              const hasNeedsFeatureEnvLabel = prData.labels.some(label => label.name === 'needs feature env');
            
              if (hasApproval && hasNeedsFeatureEnvLabel) {
                newStatus = 'Ready for product testing';
              } else if (hasApproval && !hasNeedsFeatureEnvLabel) {
                newStatus = 'Ready for merging';
              }
            }
            
            if (!newStatus) return;
            
            console.log(`Setting status to: ${newStatus} for ${issueNumbers.length} issue(s)`);
            
            try {
              // Get project data first (without items)
              const projectQuery = `
                query($org: String!, $projectNumber: Int!) {
                  organization(login: $org) {
                    projectV2(number: $projectNumber) {
                      id
                      fields(first: 40) {
                        nodes {
                          ... on ProjectV2SingleSelectField {
                            id
                            name
                            options {
                              id
                              name
                            }
                          }
                        }
                      }
                    }
                  }
                }
              `;
            
              const projectData = await github.graphql(projectQuery, {
                org: process.env.ORGANIZATION,
                projectNumber: parseInt(process.env.PROJECT_NUMBER)
              });
            
              const project = projectData.organization.projectV2;
              const statusField = project.fields.nodes.find(f => f.name === 'Status' && f.options);
            
              if (!statusField) {
                console.log('Status field not found');
                return;
              }
            
              const statusOption = statusField.options.find(o => 
                o.name.toLowerCase() === newStatus.toLowerCase()
              );
            
              if (!statusOption) {
                console.log(`Status option "${newStatus}" not found`);
                console.log('Available options:', statusField.options.map(o => o.name));
                return;
              }
            
              // Process each issue individually
              for (const issueNumber of issueNumbers) {
                try {
                  // Get issue node ID
                  const { data: issue } = await github.rest.issues.get({
                    owner: context.repo.owner,
                    repo: context.repo.repo,
                    issue_number: parseInt(issueNumber)
                  });
            
                  // Query for this specific issue in the project
                  const itemQuery = `
                    query($projectId: ID!, $issueId: ID!) {
                      node(id: $projectId) {
                        ... on ProjectV2 {
                          items(first: 1, query: $issueId) {
                            nodes {
                              id
                            }
                          }
                        }
                      }
                    }
                  `;
            
                  const itemData = await github.graphql(itemQuery, {
                    projectId: project.id,
                    issueId: issue.node_id
                  });
            
                  let itemId = null;
                  if (itemData.node.items.nodes.length > 0) {
                    itemId = itemData.node.items.nodes[0].id;
                    console.log(`Issue #${issueNumber} already in project`);
                  } else {
                    // Add issue to project
                    console.log(`Adding issue #${issueNumber} to project...`);
                    const addResult = await github.graphql(`
                      mutation($projectId: ID!, $contentId: ID!) {
                        addProjectV2ItemById(input: {projectId: $projectId, contentId: $contentId}) {
                          item {
                            id
                          }
                        }
                      }
                    `, {
                      projectId: project.id,
                      contentId: issue.node_id
                    });
            
                    itemId = addResult.addProjectV2ItemById.item.id;
                  }
            
                  // Update the status
                  if (itemId) {
                    await github.graphql(`
                      mutation($projectId: ID!, $itemId: ID!, $fieldId: ID!, $optionId: String!) {
                        updateProjectV2ItemFieldValue(
                          input: {
                            projectId: $projectId
                            itemId: $itemId
                            fieldId: $fieldId
                            value: { singleSelectOptionId: $optionId }
                          }
                        ) {
                          projectV2Item { id }
                        }
                      }
                    `, {
                      projectId: project.id,
                      itemId: itemId,
                      fieldId: statusField.id,
                      optionId: statusOption.id
                    });
            
                    console.log(`âœ… Updated issue #${issueNumber} status to "${newStatus}"`);
                  }
                } catch (error) {
                  console.error(`Error processing issue #${issueNumber}:`, error);
                  if (error.errors) {
                    error.errors.forEach(e => console.error('GraphQL error:', e.message));
                  }
                }
              }
            } catch (error) {
              console.error('Error updating project status:', error);
            }
