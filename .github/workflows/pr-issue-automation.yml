name: PR and Issue Status Management

on:
  pull_request:
    types: [opened, edited, ready_for_review, converted_to_draft]
    branches:
      - main
  pull_request_review:
    types: [submitted]
  pull_request_target:
    types: [labeled]

env:
  ORGANIZATION: 'FiligranHQ'
  PROJECT_NUMBER: 30

jobs:
  manage-pr-and-issues:
    runs-on: ubuntu-latest
    permissions:
      issues: write
      pull-requests: write
      contents: read
      repository-projects: write

    steps:
      - name: Extract issue number from branch
        id: extract_issue
        run: |
          if [[ "${{ github.head_ref }}" =~ ^issue/([0-9]+)$ ]]; then
            echo "issue_number=${BASH_REMATCH[1]}" >> $GITHUB_OUTPUT
            echo "Found issue number: ${BASH_REMATCH[1]}"
          else
            echo "Branch name doesn't match pattern issue/XYZ"
            echo "issue_number=" >> $GITHUB_OUTPUT
          fi

      - name: Check if creator is in FiligranHQ organization
        if: github.event_name == 'pull_request' && (github.event.action == 'opened' || github.event.action == 'edited')
        id: check_org_membership
        uses: actions/github-script@v7
        with:
          github-token: ${{ secrets.GITHUB_TOKEN }}
          script: |
            try {
              const { data: membership } = await github.rest.orgs.checkMembershipForUser({
                org: 'FiligranHQ',
                username: context.payload.pull_request.user.login
              });
              return true;
            } catch (error) {
              if (error.status === 404) {
                return false;
              }
              throw error;
            }

      - name: Add Filigran Team label
        if: steps.check_org_membership.outputs.result == 'true'
        uses: actions/github-script@v7
        with:
          github-token: ${{ secrets.GITHUB_TOKEN }}
          script: |
            await github.rest.issues.addLabels({
              owner: context.repo.owner,
              repo: context.repo.repo,
              issue_number: context.issue.number,
              labels: ['Filigran Team']
            });

      - name: Update issue status in project
        if: steps.extract_issue.outputs.issue_number != ''
        uses: actions/github-script@v7
        with:
          github-token: ${{ secrets.GITHUB_TOKEN }}
          script: |
            const issueNumber = ${{ steps.extract_issue.outputs.issue_number }};
            const pr = context.payload.pull_request;
            
            let status = '';
            
            // Determine the status based on PR state
            if (context.eventName === 'pull_request') {
              if (pr.draft) {
                status = 'dev in progress';
              } else if (pr.state === 'open') {
                status = 'In review';
              }
            }
            
            if (status) {
              try {
            
                // Get issue node ID
                const { data: issue } = await github.rest.issues.get({
                  owner: context.repo.owner,
                  repo: context.repo.repo,
                  issue_number: issueNumber
                });
            
                // Query the specific organization project
                const projectQuery = `
                  query($org: String!, $projectNumber: Int!) {
                    organization(login: $org) {
                      projectV2(number: $projectNumber) {
                        id
                        title
                        fields(first: 20) {
                          nodes {
                            __typename
                            ... on ProjectV2SingleSelectField {
                              id
                              name
                              options {
                                id
                                name
                              }
                            }
                            ... on ProjectV2Field {
                              id
                              name
                            }
                          }
                        }
                      }
                    }
                  }
                `;
            
                console.log('Fetching project from organization...');
                const projectData = await github.graphql(projectQuery, {
                  org: process.env.ORGANIZATION,
                  projectNumber: parseInt(process.env.PROJECT_NUMBER)
                });
            
                const project = projectData.organization.projectV2;
                console.log(`Found project: ${project.title}`);
            
                // Find the Status field
                const statusField = project.fields.nodes.find(field => 
                  field.name === 'Status' && field.options
                );
            
                if (!statusField) {
                  console.log('Status field not found');
                  console.log('Available fields:', project.fields.nodes.map(f => f.name));
                  return;
                }
            
                // Find the matching status option
                const statusOption = statusField.options.find(option => 
                  option.name.toLowerCase() === status.toLowerCase()
                );
            
                if (!statusOption) {
                  console.log(`Status option "${status}" not found`);
                  console.log('Available options:', statusField.options.map(o => o.name));
                  return;
                }
            
                // Check if issue is already in the project
                const findItemQuery = `
                  query($projectId: ID!, $issueId: ID!) {
                    node(id: $projectId) {
                      ... on ProjectV2 {
                        items(first: 100) {
                          nodes {
                            id
                            content {
                              ... on Issue {
                                id
                              }
                            }
                          }
                        }
                      }
                    }
                  }
                `;
            
                const itemsData = await github.graphql(findItemQuery, {
                  projectId: project.id,
                  issueId: issue.node_id
                });
            
                let itemId = null;
                const existingItem = itemsData.node.items.nodes.find(item => 
                  item.content && item.content.id === issue.node_id
                );
            
                if (existingItem) {
                  itemId = existingItem.id;
                  console.log('Issue already in project');
                } else {
                  // Add issue to project
                  console.log('Adding issue to project...');
                  const addItemMutation = `
                    mutation($projectId: ID!, $contentId: ID!) {
                      addProjectV2ItemById(input: {projectId: $projectId, contentId: $contentId}) {
                        item {
                          id
                        }
                      }
                    }
                  `;
            
                  const addResult = await github.graphql(addItemMutation, {
                    projectId: project.id,
                    contentId: issue.node_id
                  });
            
                  itemId = addResult.addProjectV2ItemById.item.id;
                  console.log('Issue added to project');
                }
            
                // Update the status field
                console.log('Updating status field...');
                const updateMutation = `
                  mutation($projectId: ID!, $itemId: ID!, $fieldId: ID!, $optionId: String!) {
                    updateProjectV2ItemFieldValue(
                      input: {
                        projectId: $projectId
                        itemId: $itemId
                        fieldId: $fieldId
                        value: { 
                          singleSelectOptionId: $optionId
                        }
                      }
                    ) {
                      projectV2Item {
                        id
                      }
                    }
                  }
                `;
            
                await github.graphql(updateMutation, {
                  projectId: project.id,
                  itemId: itemId,
                  fieldId: statusField.id,
                  optionId: statusOption.id
                });
            
                console.log(`âœ… Successfully updated status to "${status}"`);
            
              } catch (error) {
                console.error('Error updating project status:', error);
                if (error.errors) {
                  error.errors.forEach(e => console.error('GraphQL error:', e.message));
                }
              }
            }

      - name: Check for approval and label
        if: github.event_name == 'pull_request_review' || github.event_name == 'pull_request_target'
        uses: actions/github-script@v7
        with:
          github-token: ${{ secrets.GITHUB_TOKEN }}
          script: |
            const issueNumber = ${{ steps.extract_issue.outputs.issue_number }};
            
            if (!issueNumber) return;
            
            // Get PR data
            const { data: pr } = await github.rest.pulls.get({
              owner: context.repo.owner,
              repo: context.repo.repo,
              pull_number: context.issue.number
            });
            
            // Get reviews
            const { data: reviews } = await github.rest.pulls.listReviews({
              owner: context.repo.owner,
              repo: context.repo.repo,
              pull_number: context.issue.number
            });
            
            // Check conditions
            const hasApproval = reviews.some(review => review.state === 'APPROVED');
            const hasLabel = pr.labels.some(label => label.name === 'needs feature env');
            
            if (hasApproval && hasLabel) {
              const newStatus = 'Ready for product testing';
            
              // Update project status (similar to above)
              try {
                const { data: issue } = await github.rest.issues.get({
                  owner: context.repo.owner,
                  repo: context.repo.repo,
                  issue_number: issueNumber
                });
            
                // Get project
                const projectData = await github.graphql(`
                  query($org: String!, $projectNumber: Int!) {
                    organization(login: $org) {
                      projectV2(number: $projectNumber) {
                        id
                        fields(first: 20) {
                          nodes {
                            ... on ProjectV2SingleSelectField {
                              id
                              name
                              options {
                                id
                                name
                              }
                            }
                          }
                        }
                      }
                    }
                  }
                `, {
                  org: process.env.ORGANIZATION,
                  projectNumber: parseInt(process.env.PROJECT_NUMBER)
                });
            
                const project = projectData.organization.projectV2;
                const statusField = project.fields.nodes.find(f => f.name === 'Status' && f.options);
            
                if (statusField) {
                  const statusOption = statusField.options.find(o => 
                    o.name.toLowerCase() === newStatus.toLowerCase()
                  );
            
                  if (statusOption) {
                    // Find item in project
                    const itemsData = await github.graphql(`
                      query($projectId: ID!) {
                        node(id: $projectId) {
                          ... on ProjectV2 {
                            items(first: 100) {
                              nodes {
                                id
                                content {
                                  ... on Issue {
                                    id
                                  }
                                }
                              }
                            }
                          }
                        }
                      }
                    `, {
                      projectId: project.id
                    });
            
                    const item = itemsData.node.items.nodes.find(i => 
                      i.content && i.content.id === issue.node_id
                    );
            
                    if (item) {
                      await github.graphql(`
                        mutation($projectId: ID!, $itemId: ID!, $fieldId: ID!, $optionId: String!) {
                          updateProjectV2ItemFieldValue(
                            input: {
                              projectId: $projectId
                              itemId: $itemId
                              fieldId: $fieldId
                              value: { singleSelectOptionId: $optionId }
                            }
                          ) {
                            projectV2Item { id }
                          }
                        }
                      `, {
                        projectId: project.id,
                        itemId: item.id,
                        fieldId: statusField.id,
                        optionId: statusOption.id
                      });
            
                      console.log(`Updated status to "${newStatus}"`);
                    }
                  }
                }
              } catch (error) {
                console.error('Error updating project status:', error);
              }
            }
