name: Debug Project Field Update

on:
  workflow_dispatch:

env:
  ORGANIZATION: 'FiligranHQ'
  PROJECT_NUMBER: 30
  ISSUE_NUMBER: 100
  TEST_VERSION: 'v1.0.0-test'

jobs:
  debug-project:
    runs-on: ubuntu-latest
    permissions:
      issues: write

    steps:
      - uses: actions/create-github-app-token@v2
        id: app-token
        with:
          app-id: ${{ vars.FILIGRANHQ_PROJECT_APP_ID }}
          private-key: ${{ secrets.FILIGRANHQ_PROJECT_APP_PRIVATE_KEY }}
          owner: ${{ github.repository_owner }}

      - name: Debug - Get Project Structure
        uses: actions/github-script@v7
        with:
          github-token: ${{ steps.app-token.outputs.token }}
          script: |
            console.log('=== STEP 1: Getting Project Structure ===');
            
            try {
              // Query to get project fields
              const projectFieldsQuery = `
                query($org: String!, $number: Int!) {
                  organization(login: $org) {
                    projectV2(number: $number) {
                      id
                      title
                      fields(first: 20) {
                        nodes {
                          ... on ProjectV2Field {
                            id
                            name
                            dataType
                          }
                          ... on ProjectV2SingleSelectField {
                            id
                            name
                            dataType
                            options {
                              id
                              name
                            }
                          }
                        }
                      }
                    }
                  }
                }
              `;
            
              const projectData = await github.graphql(projectFieldsQuery, {
                org: '${{ env.ORGANIZATION }}',
                number: parseInt('${{ env.PROJECT_NUMBER }}')
              });
            
              console.log('Project Title:', projectData.organization.projectV2.title);
              console.log('Project ID:', projectData.organization.projectV2.id);
              console.log('\nAvailable Fields:');
            
              let versionFieldId = null;
              let statusFieldId = null;
            
              for (const field of projectData.organization.projectV2.fields.nodes) {
                console.log(`- ${field.name} (${field.dataType}) - ID: ${field.id}`);
            
                if (field.options) {
                  console.log(`  Options: ${field.options.map(o => `${o.name} (${o.id})`).join(', ')}`);
                }
            
                if (field.name.toLowerCase().includes('version')) {
                  versionFieldId = field.id;
                  console.log(`  ✓ Found Version field!`);
                }
            
                if (field.name === 'Status') {
                  statusFieldId = field.id;
                }
              }
            
              // Save for next steps
              core.exportVariable('PROJECT_ID', projectData.organization.projectV2.id);
              core.exportVariable('VERSION_FIELD_ID', versionFieldId || '');
              core.exportVariable('STATUS_FIELD_ID', statusFieldId || '');
            
            } catch (error) {
              console.error('Error getting project structure:', error);
              console.error('Details:', error.message);
              throw error;
            }

      - name: Debug - Get Issue Project Item
        uses: actions/github-script@v7
        with:
          github-token: ${{ steps.app-token.outputs.token }}
          script: |
            console.log('\n=== STEP 2: Getting Issue Project Item ===');
            
            try {
              // Query to get issue's project items
              const issueQuery = `
                query($owner: String!, $repo: String!, $issue: Int!) {
                  repository(owner: $owner, name: $repo) {
                    issue(number: $issue) {
                      id
                      title
                      state
                      projectItems(first: 10) {
                        nodes {
                          id
                          project {
                            id
                            title
                            number
                          }
                          fieldValues(first: 20) {
                            nodes {
                              ... on ProjectV2ItemFieldTextValue {
                                text
                                field {
                                  ... on ProjectV2Field {
                                    id
                                    name
                                  }
                                }
                              }
                              ... on ProjectV2ItemFieldSingleSelectValue {
                                name
                                field {
                                  ... on ProjectV2SingleSelectField {
                                    id
                                    name
                                  }
                                }
                              }
                            }
                          }
                        }
                      }
                    }
                  }
                }
              `;
            
              const issueData = await github.graphql(issueQuery, {
                owner: context.repo.owner,
                repo: context.repo.repo,
                issue: parseInt('${{ env.ISSUE_NUMBER }}')
              });
            
              const issue = issueData.repository.issue;
              console.log(`Issue #${{ env.ISSUE_NUMBER }}: ${issue.title}`);
              console.log(`State: ${issue.state}`);
              console.log(`\nProject Items: ${issue.projectItems.nodes.length}`);
            
              let targetProjectItem = null;
            
              for (const item of issue.projectItems.nodes) {
                console.log(`\n- Project: ${item.project.title} (#${item.project.number})`);
                console.log(`  Project ID: ${item.project.id}`);
                console.log(`  Item ID: ${item.id}`);
            
                if (item.project.number === parseInt('${{ env.PROJECT_NUMBER }}')) {
                  targetProjectItem = item;
                  console.log('  ✓ This is our target project!');
            
                  console.log('\n  Current Field Values:');
                  for (const fieldValue of item.fieldValues.nodes) {
                    if (fieldValue.field) {
                      const value = fieldValue.text || fieldValue.name || 'N/A';
                      console.log(`  - ${fieldValue.field.name}: ${value}`);
                    }
                  }
                }
              }
            
              if (targetProjectItem) {
                core.exportVariable('PROJECT_ITEM_ID', targetProjectItem.id);
              } else {
                console.error(`Issue #${{ env.ISSUE_NUMBER }} is not in project #${{ env.PROJECT_NUMBER }}`);
              }
            
            } catch (error) {
              console.error('Error getting issue data:', error);
              console.error('Details:', error.message);
              throw error;
            }

      - name: Debug - Update Version Field
        if: env.VERSION_FIELD_ID != '' && env.PROJECT_ITEM_ID != ''
        uses: actions/github-script@v7
        with:
          github-token: ${{ steps.app-token.outputs.token }}
          script: |
            console.log('\n=== STEP 3: Updating Version Field ===');
            
            try {
              const updateMutation = `
                mutation($projectId: ID!, $itemId: ID!, $fieldId: ID!, $value: ProjectV2FieldValue!) {
                  updateProjectV2ItemFieldValue(
                    input: {
                      projectId: $projectId
                      itemId: $itemId
                      fieldId: $fieldId
                      value: $value
                    }
                  ) {
                    projectV2Item {
                      id
                    }
                  }
                }
              `;
            
              console.log('Project ID:', process.env.PROJECT_ID);
              console.log('Item ID:', process.env.PROJECT_ITEM_ID);
              console.log('Version Field ID:', process.env.VERSION_FIELD_ID);
              console.log('New Version:', '${{ env.TEST_VERSION }}');
            
              const result = await github.graphql(updateMutation, {
                projectId: process.env.PROJECT_ID,
                itemId: process.env.PROJECT_ITEM_ID,
                fieldId: process.env.VERSION_FIELD_ID,
                value: { text: '${{ env.TEST_VERSION }}' }
              });
            
              console.log('✓ Successfully updated version field!');
              console.log('Result:', result);
            
            } catch (error) {
              console.error('Error updating version field:', error);
              console.error('Details:', error.message);
              if (error.errors) {
                console.error('GraphQL Errors:', JSON.stringify(error.errors, null, 2));
              }
              throw error;
            }

      - name: Debug - Verify Update
        if: env.VERSION_FIELD_ID != '' && env.PROJECT_ITEM_ID != ''
        uses: actions/github-script@v7
        with:
          github-token: ${{ steps.app-token.outputs.token }}
          script: |
            console.log('\n=== STEP 4: Verifying Update ===');
            
            // Query to verify the update
            const verifyQuery = `
              query($itemId: ID!) {
                node(id: $itemId) {
                  ... on ProjectV2Item {
                    fieldValues(first: 20) {
                      nodes {
                        ... on ProjectV2ItemFieldTextValue {
                          text
                          field {
                            ... on ProjectV2Field {
                              name
                            }
                          }
                        }
                      }
                    }
                  }
                }
              }
            `;
            
            const result = await github.graphql(verifyQuery, {
              itemId: process.env.PROJECT_ITEM_ID
            });
            
            console.log('Current field values:');
            for (const fieldValue of result.node.fieldValues.nodes) {
              if (fieldValue.field) {
                console.log(`- ${fieldValue.field.name}: ${fieldValue.text || 'N/A'}`);
              }
            }
